# main_window.py
# main_window.py

"""Main window-style application."""

import sys
from PyQt6.QtWidgets import (
    QApplication,
    QLabel,
    QMainWindow,
    QStatusBar,
    QToolBar,
    QTabWidget,
    QWidget,
    QVBoxLayout,
    QHBoxLayout,
    QPushButton,
    QLineEdit,
    QTableWidget,
    QTableWidgetItem,
)

class Window(QMainWindow):
    def __init__(self):
        super().__init__(parent=None)
        self.setWindowTitle("Rocket Simulator")
        self.setCentralWidget(QTabWidget())
        self._createTabs()
        self._createMenu()
        self._createToolBar()
        self._createStatusBar()

    def _createTabs(self):
        tabs = self.centralWidget()
        motor_curve_tab = QWidget()
        graphics_tab = QWidget()
        atmosphere_tab = QWidget()
        wind_tab = QWidget()

        tabs.addTab(motor_curve_tab, "Curva de Motor")
        tabs.addTab(graphics_tab, "Gráficas")
        tabs.addTab(atmosphere_tab, "Atmósfera")
        tabs.addTab(wind_tab, "Viento")

        self._createMotorCurveTab(motor_curve_tab)
        self._createGraphicsTab(graphics_tab)

    def _createMotorCurveTab(self, tab):
        layout = QVBoxLayout()
        tab.setLayout(layout)

        # Campos de entrada
        input_layout = QHBoxLayout()
        input_layout.addWidget(QLabel("Motor:"))
        self.motor_input = QLineEdit()
        input_layout.addWidget(self.motor_input)
        input_layout.addWidget(QLabel("Curva:"))
        self.curve_input = QLineEdit()
        input_layout.addWidget(self.curve_input)

        layout.addLayout(input_layout)

        # Botones
        button_layout = QHBoxLayout()
        save_button = QPushButton("Guardar")
        save_button.clicked.connect(self.saveMotorCurveData)
        button_layout.addWidget(save_button)
        clear_button = QPushButton("Limpiar")
        clear_button.clicked.connect(self.clearMotorCurveData)
        button_layout.addWidget(clear_button)

        layout.addLayout(button_layout)

    def _createGraphicsTab(self, tab):
        layout = QVBoxLayout()
        tab.setLayout(layout)

        # Tabla
        self.graphics_table = QTableWidget()
        self.graphics_table.setRowCount(5)
        self.graphics_table.setColumnCount(2)
        self.graphics_table.setHorizontalHeaderItem(0, QTableWidgetItem("X"))
        self.graphics_table.setHorizontalHeaderItem(1, QTableWidgetItem("Y"))
        layout.addWidget(self.graphics_table)

    def saveMotorCurveData(self):
        motor = self.motor_input.text()
        curve = self.curve_input.text()
        # Aquí puedes guardar los datos en variables o en una base de datos
        print(f"Guardando datos: Motor={motor}, Curva={curve}")

    def clearMotorCurveData(self):
        self.motor_input.clear()
        self.curve_input.clear()

    def _createMenu(self):
        menu = self.menuBar().addMenu("&Menu")
        menu.addAction("&Exit", self.close)

    def _createToolBar(self):
        tools = QToolBar()
        tools.addAction("Exit", self.close)
        self.addToolBar(tools)

    def _createStatusBar(self):
        status = QStatusBar()
        status.showMessage("Estas diseñando un COHETE :)")
        self.setStatusBar(status)

if __name__ == "__main__":
    app = QApplication([])
    window = Window()
    window.show()
    sys.exit(app.exec())